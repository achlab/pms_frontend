"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Receipt, Search } from "lucide-react"
import { useAppSelector, useAppDispatch } from "@/lib/hooks"
import { formatCurrency } from "@/lib/localization"

interface PaymentFormData {
  tenantId: string
  propertyId: string
  amount: string
  paymentMethod: string
  reference: string
  receivedDate: string
  notes: string
}

interface PaymentRecordModalProps {
  trigger?: React.ReactNode
  prefilledTenantId?: string
  prefilledAmount?: number
}

export function PaymentRecordModal({ trigger, prefilledTenantId, prefilledAmount }: PaymentRecordModalProps) {
  const dispatch = useAppDispatch()
  const [open, setOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState("")
  const [formData, setFormData] = useState<PaymentFormData>({
    tenantId: prefilledTenantId || "",
    propertyId: "",
    amount: prefilledAmount?.toString() || "",
    paymentMethod: "",
    reference: "",
    receivedDate: new Date().toISOString().split("T")[0],
    notes: "",
  })
  const [errors, setErrors] = useState<Partial<PaymentFormData>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  const { properties } = useAppSelector((state) => state.properties)
  const { users } = useAppSelector((state) => state.users)

  const tenants = users.filter((user) => user.role === "tenant")
  const filteredTenants = tenants.filter(
    (tenant) =>
      tenant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      tenant.phone?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      tenant.email?.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  useEffect(() => {
    if (formData.tenantId && !prefilledAmount) {
      // Mock rent amount - in real app, this would come from tenant's lease info
      const selectedTenant = tenants.find((t) => t.id.toString() === formData.tenantId)
      if (selectedTenant) {
        // Mock rent amounts based on tenant - in real app, get from lease data
        const mockRentAmounts: { [key: string]: number } = {
          "1": 800,
          "2": 1200,
          "3": 1500,
        }
        const rentAmount = mockRentAmounts[formData.tenantId] || 1000
        setFormData((prev) => ({ ...prev, amount: rentAmount.toString() }))
      }
    }
  }, [formData.tenantId, tenants, prefilledAmount])

  const validateForm = (): boolean => {
    const newErrors: Partial<PaymentFormData> = {}

    if (!formData.tenantId) newErrors.tenantId = "Please select a tenant"
    if (!formData.amount || Number.parseFloat(formData.amount) <= 0) newErrors.amount = "Please enter a valid amount"
    if (!formData.paymentMethod) newErrors.paymentMethod = "Please select a payment method"
    if (!formData.reference.trim()) newErrors.reference = "Please enter a reference number"
    if (!formData.receivedDate) newErrors.receivedDate = "Please select a date"

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      const paymentRecord = {
        id: Date.now().toString(), // In real app, this would be generated by backend
        tenantId: Number.parseInt(formData.tenantId),
        propertyId: formData.propertyId ? Number.parseInt(formData.propertyId) : null,
        amount: Number.parseFloat(formData.amount),
        paymentMethod: formData.paymentMethod,
        reference: formData.reference,
        receivedDate: formData.receivedDate,
        status: "confirmed",
        recordedBy: "Current Landlord", // In real app, get from current user
        notes: formData.notes,
        createdAt: new Date().toISOString(),
      }

      console.log("[v0] Recording payment:", paymentRecord)

      // Mock API call delay
      await new Promise((resolve) => setTimeout(resolve, 1000))

      setFormData({
        tenantId: prefilledTenantId || "",
        propertyId: "",
        amount: prefilledAmount?.toString() || "",
        paymentMethod: "",
        reference: "",
        receivedDate: new Date().toISOString().split("T")[0],
        notes: "",
      })
      setErrors({})
      setSearchTerm("")
      setOpen(false)

      console.log("[v0] Payment recorded successfully!")
    } catch (error) {
      console.error("[v0] Error recording payment:", error)
      // In real app, show error toast
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleInputChange = (field: keyof PaymentFormData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: undefined }))
    }
  }

  const generateReference = (method: string) => {
    const date = new Date()
    const dateStr = date.toISOString().slice(2, 10).replace(/-/g, "")
    const timeStr = date.getTime().toString().slice(-3)

    const prefixes: { [key: string]: string } = {
      mobile_money: "MM",
      cash: "CASH",
      bank_transfer: "BT",
      cheque: "CHQ",
    }

    const prefix = prefixes[method] || "PAY"
    return `${prefix}${dateStr}${timeStr}`
  }

  useEffect(() => {
    if (formData.paymentMethod && !formData.reference) {
      const autoRef = generateReference(formData.paymentMethod)
      setFormData((prev) => ({ ...prev, reference: autoRef }))
    }
  }, [formData.paymentMethod, formData.reference])

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button className="min-h-[44px] bg-gradient-to-r from-green-600 to-emerald-500">
            <Plus className="h-4 w-4 mr-2" />
            Record Payment
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-lg bg-white dark:bg-gray-700">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-gray-900 dark:text-white">
            <Receipt className="h-5 w-5" />
            Record Manual Payment
          </DialogTitle>
          <DialogDescription className="text-gray-600 dark:text-gray-400">
            Manually record a payment received from a tenant.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="tenant" className="text-gray-700 dark:text-gray-300">
              Tenant *
            </Label>
            {!prefilledTenantId ? (
              <div className="space-y-2">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search tenants..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
                <Select value={formData.tenantId} onValueChange={(value) => handleInputChange("tenantId", value)}>
                  <SelectTrigger className={errors.tenantId ? "border-red-500" : ""}>
                    <SelectValue placeholder="Select tenant" />
                  </SelectTrigger>
                  <SelectContent>
                    {filteredTenants.map((tenant) => (
                      <SelectItem key={tenant.id} value={tenant.id.toString()}>
                        <div className="flex flex-col">
                          <span>{tenant.name}</span>
                          <span className="text-sm text-gray-500">{tenant.phone}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            ) : (
              <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-md">
                <span className="text-gray-900 dark:text-white">
                  {tenants.find((t) => t.id.toString() === prefilledTenantId)?.name || "Selected Tenant"}
                </span>
              </div>
            )}
            {errors.tenantId && <p className="text-sm text-red-500">{errors.tenantId}</p>}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="amount" className="text-gray-700 dark:text-gray-300">
                Amount *
              </Label>
              <div className="relative">
                <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">â‚µ</span>
                <Input
                  id="amount"
                  type="number"
                  placeholder="0.00"
                  step="0.01"
                  value={formData.amount}
                  onChange={(e) => handleInputChange("amount", e.target.value)}
                  className={`pl-8 ${errors.amount ? "border-red-500" : ""}`}
                />
              </div>
              {errors.amount && <p className="text-sm text-red-500">{errors.amount}</p>}
              {formData.amount && Number.parseFloat(formData.amount) > 0 && (
                <p className="text-sm text-gray-500">Amount: {formatCurrency(Number.parseFloat(formData.amount))}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="paymentMethod" className="text-gray-700 dark:text-gray-300">
                Payment Method *
              </Label>
              <Select
                value={formData.paymentMethod}
                onValueChange={(value) => handleInputChange("paymentMethod", value)}
              >
                <SelectTrigger className={errors.paymentMethod ? "border-red-500" : ""}>
                  <SelectValue placeholder="Select method" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="cash">Cash</SelectItem>
                  <SelectItem value="mobile_money">MTN Mobile Money</SelectItem>
                  <SelectItem value="vodafone_cash">Vodafone Cash</SelectItem>
                  <SelectItem value="airteltigo_money">AirtelTigo Money</SelectItem>
                  <SelectItem value="bank_transfer">Bank Transfer</SelectItem>
                  <SelectItem value="cheque">Cheque</SelectItem>
                </SelectContent>
              </Select>
              {errors.paymentMethod && <p className="text-sm text-red-500">{errors.paymentMethod}</p>}
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="reference" className="text-gray-700 dark:text-gray-300">
                Reference Number *
              </Label>
              <Input
                id="reference"
                placeholder="e.g., MM240201001"
                value={formData.reference}
                onChange={(e) => handleInputChange("reference", e.target.value)}
                className={errors.reference ? "border-red-500" : ""}
              />
              {errors.reference && <p className="text-sm text-red-500">{errors.reference}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="receivedDate" className="text-gray-700 dark:text-gray-300">
                Date Received *
              </Label>
              <Input
                id="receivedDate"
                type="date"
                value={formData.receivedDate}
                onChange={(e) => handleInputChange("receivedDate", e.target.value)}
                className={errors.receivedDate ? "border-red-500" : ""}
              />
              {errors.receivedDate && <p className="text-sm text-red-500">{errors.receivedDate}</p>}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes" className="text-gray-700 dark:text-gray-300">
              Notes (Optional)
            </Label>
            <Textarea
              id="notes"
              placeholder="Additional payment details, mobile money number, etc."
              rows={3}
              value={formData.notes}
              onChange={(e) => handleInputChange("notes", e.target.value)}
              className="resize-none"
            />
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button type="button" variant="outline" onClick={() => setOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting} className="bg-gradient-to-r from-green-600 to-emerald-500">
              {isSubmitting ? "Recording..." : "Record Payment"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}
